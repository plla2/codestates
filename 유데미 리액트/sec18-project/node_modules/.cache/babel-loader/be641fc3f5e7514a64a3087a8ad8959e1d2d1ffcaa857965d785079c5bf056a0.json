{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\";\n\n// const initialCounterState = { counter: 0, showCounter: true }\n\n// 리덕스 툴킷을 활용한 방법\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   }\n// });\n\n// const initialAuthState = {\n//   isAuthenticated: false,\n// }\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   }\n// })\n\n// 리덕스를 활용한 방법\n// const counterReducer = (state = initialCounterState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     }\n//   }\n//   return state;\n// }\n\nconst store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    auth: authReducer\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","counterReducer","authReducer","store","reducer","counter","auth"],"sources":["/Users/jeongseunghyeon/Desktop/코드스테이츠/codestates/유데미 리액트/sec18-project/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport counterReducer from \"./counter\";\nimport authReducer from \"./auth\";\n\n// const initialCounterState = { counter: 0, showCounter: true }\n\n// 리덕스 툴킷을 활용한 방법\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = state.counter + action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   }\n// });\n\n// const initialAuthState = {\n//   isAuthenticated: false,\n// }\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   }\n// })\n\n\n// 리덕스를 활용한 방법\n// const counterReducer = (state = initialCounterState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     }\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     }\n//   }\n//   return state;\n// }\n\n\nconst store = configureStore({\n  reducer: { counter: counterReducer, auth: authReducer }\n})\n\n\n\n\nexport default store;\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,cAAc,MAAM,WAAW;AACtC,OAAOC,WAAW,MAAM,QAAQ;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAC3BK,OAAO,EAAE;IAAEC,OAAO,EAAEJ,cAAc;IAAEK,IAAI,EAAEJ;EAAY;AACxD,CAAC,CAAC;AAKF,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}